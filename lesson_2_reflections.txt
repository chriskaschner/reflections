*** What happens when you initialize a repository? Why do you need to do it? ***
Git creates a .git file that tracks any changes to files within the repository.
It also sets the stage for the ability to begin committing.

*** How is the staging area different from the working directory and the 
repository? What value do you think it offers? ***

A staging area lets me define what files get added to a repository.  By giving
me more control, I can do things like- exclude system files (e.g. .DS_store), 
or limit the number of files in my initial commit (e.g. separating lesson 1 & 2)

*** How can you use the staging area to make sure you have one commit per 
logical change? ***

The staging area makes it much easier to separate out changes.  Then I can stage
one file, commit, comment and repeat as necessary for all files allowing
manageable chunks per commit.

*** What are some situations when branches would be helpful in keeping your
history organized? How would branches help? ***

Branches are helpful in situations where you want to try out or experiment with 
existing files without making changes or breaking something that works. Want a
new feature? Change language? Experiment with a different layout or color scheme
All of these would be situations where branches would be useful.  Also, when 
multiple users are working on a file, say, in different parts of the codebase
branches allow different people to be working on different portions while still
maintaining version control of their branch before merging back to one master
branch at the end.

*** How do the diagrams help you visualize the branch structure? ***

They make it easier to understand the branches, reachability, and form of a 
revision structure.

*** What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do? ***

Bringing together two different branches into a common branch.  Represent it
to show the hierarchical parentage of indvidual branches.